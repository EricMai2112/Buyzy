// cartController.ts (PHI√äN B·∫¢N HO√ÄN CH·ªàNH V√Ä ƒê√É FIX L·ªñI TREO)

import { Request, Response } from "express";
import { Cart } from "../models/Cart";
import { Product } from "../models/Product";
import mongoose from "mongoose";
import { getUserIdFromRequest } from "../utils/getUserIdFromRequest";

const getUserId = (req: Request): mongoose.Types.ObjectId | null => {
  return getUserIdFromRequest(req); // ‚úÖ D√πng Helper m·ªõi
};

export const getCarts = async (req: Request, res: Response) => {
  try {
    const userId = getUserId(req);
    const cart = await Cart.findOne({ user_id: userId });

    res.json(cart ? cart.items : []);
  } catch (err) {
    res.status(500).json({ error: "Failed to fetch cart" });
  }
};

// üéØ H√ÄM TH√äM/C·∫¨P NH·∫¨T S·∫¢N PH·∫®M V√ÄO GI·ªé H√ÄNG
export const addToCart = async (req: Request, res: Response) => {
  const { productId, qty, color, size } = req.body;

  if (!productId || qty === undefined || qty < 1) {
    return res.status(400).json({ error: "Invalid productId or quantity" });
  }

  try {
    const userId = getUserId(req);
    let cart = await Cart.findOne({ user_id: userId });

    const productDetail = await Product.findById(productId);
    if (!productDetail) {
      return res.status(404).json({ error: "Product not found" });
    }

    if (!cart) {
      cart = await Cart.create({ user_id: userId, items: [] });
    }

    const itemIndex = cart.items.findIndex(
      (item: any) =>
        item.product_id.toString() === productId &&
        item.color === color && // ‚úÖ SO S√ÅNH C·∫¢ VARIANTS
        item.size === size // ‚úÖ SO S√ÅNH C·∫¢ VARIANTS
    );

    if (itemIndex > -1) {
      // 3. N·∫øu c√≥, tƒÉng s·ªë l∆∞·ª£ng
      cart.items[itemIndex].qty += qty;
    } else {
      // 4. N·∫øu ch∆∞a c√≥, th√™m s·∫£n ph·∫©m m·ªõi
      cart.items.push({
        product_id: productId,
        name: productDetail.name,
        price: productDetail.price,
        qty: qty,
        image_url: productDetail.image_url,
        // ‚úÖ L∆ØU VARIANTS ƒê√É CH·ªåN
        color: color,
        size: size,
      });
    }

    // T√≠nh l·∫°i subtotal (ƒë√£ fix l·ªói TypeScript)
    cart.subtotal = cart.items.reduce((sum, item) => {
      const price = item.price ?? 0;
      const qty = item.qty ?? 0;
      return sum + price * qty;
    }, 0);

    await cart.save();
    res.json(cart.items);
  } catch (err) {
    res.status(500).json({ error: "Failed to add item to cart" });
  }
};

// üéØ H√ÄM C·∫¨P NH·∫¨T S·ªê L∆Ø·ª¢NG (D√πng cho n√∫t +/-)
export const updateCartItem = async (req: Request, res: Response) => {
  const { productId } = req.params;
  const { qty, color, size } = req.body;

  if (qty === undefined) {
    return res.status(400).json({ error: "Missing quantity" });
  }

  try {
    const userId = getUserId(req);
    const cart = await Cart.findOne({ user_id: userId });
    if (!cart) {
      return res.status(404).json({ error: "Cart not found" });
    }

    const itemIndex = cart.items.findIndex(
      (item: any) =>
        item.product_id.toString() === productId &&
        (item.color || "") === (color || "") && // So s√°nh, x·ª≠ l√Ω tr∆∞·ªùng h·ª£p undefined/null
        (item.size || "") === (size || "") // So s√°nh, x·ª≠ l√Ω tr∆∞·ªùng h·ª£p undefined/null
    );

    if (itemIndex > -1) {
      if (qty <= 0) {
        // X√≥a s·∫£n ph·∫©m n·∫øu qty <= 0
        cart.items.splice(itemIndex, 1);
      } else {
        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        cart.items[itemIndex].qty = qty;
      } // T√≠nh l·∫°i subtotal (gi·ªØ nguy√™n)

      cart.subtotal = cart.items.reduce((sum, item) => {
        const price = item.price ?? 0;
        const qty = item.qty ?? 0;
        return sum + price * qty;
      }, 0);

      await cart.save(); // Tr·∫£ v·ªÅ to√†n b·ªô gi·ªè h√†ng ƒë√£ c·∫≠p nh·∫≠t
      return res.json(cart.items);
    } else {
      // N·∫øu item kh√¥ng t·ªìn t·∫°i, c√≥ th·ªÉ do gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c l√†m m·ªõi ho·∫∑c ƒë√£ b·ªã x√≥a
      return res
        .status(404)
        .json({ error: "Product variant not found in cart" });
    }
  } catch (err) {
    console.error("Error updating cart item:", err);
    res.status(500).json({ error: "Failed to update cart item" });
  }
};

// üéØ H√ÄM X√ìA GI·ªé H√ÄNG (FIXED: S·ª≠a l·ªói treo giao di·ªán)
export const clearCart = async (req: Request, res: Response) => {
  try {
    const userId = getUserId(req);

    // ‚úÖ D√πng updateOne ƒë·ªÉ x·ª≠ l√Ω reset m·∫£ng items v√† subtotal nhanh ch√≥ng
    const result = await Cart.updateOne(
      { user_id: userId },
      { $set: { items: [], subtotal: 0 } }
    );

    // Ki·ªÉm tra xem c√≥ gi·ªè h√†ng n√†o ƒë∆∞·ª£c update kh√¥ng
    if (result.matchedCount === 0) {
      // V·∫´n g·ª≠i 200 OK n·∫øu gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i, v√¨ m·ª•c ƒë√≠ch l√† clear cart
      return res.json({ message: "Cart not found or already cleared." });
    }

    // ‚úÖ PH·∫¢I C√ì D√íNG N√ÄY: G·ª≠i ph·∫£n h·ªìi HTTP th√†nh c√¥ng
    res.json({ message: "Cart cleared successfully" });
  } catch (err) {
    // G·ª≠i l·ªói 500 n·∫øu c√≥ l·ªói database
    console.error("Error clearing cart:", err);
    res.status(500).json({ error: "Failed to clear cart" });
  }
};
